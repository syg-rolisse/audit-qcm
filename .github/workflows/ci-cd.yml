name: Audit-Qcm CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  docker-action:
    runs-on: ubuntu-latest # L'environnement d'ex√©cution

    steps:
      # 1. Cloner le d√©p√¥t
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: üì§ Copier le fichier .env du back
        run: |
          cd /home/runner/work/audit-qcm/audit-qcm/apis
          touch .env
          echo ${{ secrets.APIS_ENV_TZ }} >> .env
          echo ${{ secrets.APIS_ENV_PORT }} >> .env
          echo ${{ secrets.APIS_ENV_HOST }} >> .env
          echo ${{ secrets.APIS_ENV_LOG_LEVEL }} >> .env
          echo ${{ secrets.APIS_ENV_APP_KEY }} >> .env
          echo ${{ secrets.APIS_ENV_NODE_ENV }} >> .env
          echo ${{ secrets.APIS_ENV_DB_HOST }} >> .env
          echo ${{ secrets.APIS_ENV_DB_PORT }} >> .env
          echo ${{ secrets.APIS_ENV_DB_USER }} >> .env
          echo ${{ secrets.APIS_ENV_DB_PASSWORD }} >> .env
          echo ${{ secrets.APIS_ENV_DB_DATABASE }} >> .env
          echo ${{ secrets.APIS_ENV_SMTP_HOST }} >> .env
          echo ${{ secrets.APIS_ENV_SMTP_PORT }} >> .env
          echo ${{ secrets.APIS_ENV_SMTP_USERNAME }} >> .env
          echo ${{ secrets.APIS_ENV_SMTP_PASSWORD }} >> .env
          echo ${{ secrets.APIS_ENV_CACHE_VIEWS }} >> .env
          echo ${{ secrets.APIS_ENV_VITE_FRONT_URL }} >> .env
          echo ${{ secrets.POSTGRES_USER }} >> .env
          echo ${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo ${{ secrets.POSTGRES_DB }} >> .env
          echo "Fichier .env copi√© avec succ√®s"

      - name: üì§ Copier le fichier .env du front
        run: |
          cd /home/runner/work/audit-qcm/audit-qcm/apps
          touch .env
          echo ${{ secrets.APP_ENV }} >> .env
          echo "Fichier .env du front copi√© avec succ√®s"

      # 2. Cache des d√©pendances Node.js (si applicable)
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/apis/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      # 3. Installer Docker et Docker Compose
      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/trusted.gpg.d/docker.asc
          echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          sudo apt-get install -y docker-compose
          sudo usermod -aG docker $USER  # Donne les droits d'ex√©cution √† Docker

      # 4. Lancer Docker Compose
      - name: Run Docker Compose
        run: |
          pwd
          ls -al
          sudo docker-compose up -d  # Lancer les conteneurs en arri√®re-plan

      # 5. V√©rifier que tous les conteneurs sont bien up
      - name: Verify Docker Containers
        run: |
          docker ps  # Affiche les conteneurs actifs et v√©rifie leur statut
          docker-compose ps  # V√©rifie l'√©tat des conteneurs d√©finis dans docker-compose.yml

  deploy-apis:
    needs: docker-action
    runs-on: ubuntu-latest
    steps:
      - name: üõ†Ô∏è Checkout du code
        uses: actions/checkout@v4

      # 2. Connexion au VPS et pr√©paration du r√©pertoire
      - name: üîë Connexion au VPS et pr√©paration du r√©pertoire
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            rm -rf /opt/audit-qcm/apis/
            mkdir -p /opt/audit-qcm/apis/
            echo "R√©pertoire /opt/audit-qcm/apis/ pr√™t"

      # 3. Copier les fichiers du Backend vers le VPS (structure respect√©e)
      - name: üì§ Copier les fichiers Backend sur le VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "apis/*"
          target: /opt/audit-qcm/apis/
          strip_components: 1

      # 4. Copier le fichier .env sur le VPS
      - name: üì§ Copier le fichier .env sur le VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /opt/audit-qcm/apis
            touch .env
            echo ${{ secrets.APIS_ENV_TZ }} >> .env
            echo ${{ secrets.APIS_ENV_PORT }} >> .env
            echo ${{ secrets.APIS_ENV_HOST }} >> .env
            echo ${{ secrets.APIS_ENV_LOG_LEVEL }} >> .env
            echo ${{ secrets.APIS_ENV_APP_KEY }} >> .env
            echo ${{ secrets.APIS_ENV_NODE_ENV }} >> .env
            echo ${{ secrets.APIS_ENV_DB_HOST }} >> .env
            echo ${{ secrets.APIS_ENV_DB_PORT }} >> .env
            echo ${{ secrets.APIS_ENV_DB_USER }} >> .env
            echo ${{ secrets.APIS_ENV_DB_PASSWORD }} >> .env
            echo ${{ secrets.APIS_ENV_DB_DATABASE }} >> .env
            echo ${{ secrets.APIS_ENV_SMTP_HOST }} >> .env
            echo ${{ secrets.APIS_ENV_SMTP_PORT }} >> .env
            echo ${{ secrets.APIS_ENV_SMTP_USERNAME }} >> .env
            echo ${{ secrets.APIS_ENV_SMTP_PASSWORD }} >> .env
            echo ${{ secrets.APIS_ENV_CACHE_VIEWS }} >> .env
            echo ${{ secrets.APIS_ENV_VITE_FRONT_URL }} >> .env
            echo ${{ secrets.POSTGRES_USER }} >> .env
            echo ${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo ${{ secrets.POSTGRES_DB }} >> .env
            echo "Fichier .env copi√© avec succ√®s sur le VPS"

  deploy-apps:
    needs: deploy-apis
    runs-on: ubuntu-latest
    steps:
      - name: üõ†Ô∏è Checkout du code
        uses: actions/checkout@v4

      # 2. Connexion au VPS et pr√©paration du r√©pertoire
      - name: üîë Connexion au VPS et pr√©paration du r√©pertoire
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            rm -rf /opt/audit-qcm/apps/
            mkdir -p /opt/audit-qcm/apps
            cd /opt/audit-qcm/apps
            touch .env

      # 3. Copier les fichiers Frontend sur le VPS
      - name: üì§ Copier les fichiers Frontend sur le VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: |
            apps/*
            docker-compose.yml
          target: /opt/audit-qcm/

      # 4. Copier le fichier .env sur le VPS
      - name: üì§ Copier le fichier .env sur le VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /opt/audit-qcm/apps
            touch .env
            echo ${{ secrets.APP_ENV }} >> .env

      # 5. Lancer Docker Compose et d√©marrer les services sur le VPS
      - name: Deploy and start Docker services on VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /opt/audit-qcm
            docker-compose build  
            docker-compose up -d 
            docker image prune -f 
            docker ps
